\documentclass[12pt]{article}
\usepackage[utf8]{inputenc}
\usepackage{graphicx}
\usepackage{color}
\definecolor{blue1}{RGB}{0,102,204}
%% \usepackage[colorlinks=true,linkcolor=blue1,citecolor=blue1,urlcolor=blue1]{hyperref}
\usepackage[colorlinks=true,linkcolor=blue,citecolor=blue,urlcolor=blue]{hyperref}
\usepackage{array}
\usepackage[english]{babel}
\usepackage{amsfonts}
\usepackage{url}
\usepackage{bm}
\usepackage[margin=2.5cm]{geometry}
\usepackage[affil-it]{authblk}

\newcommand{\R}{\mathbb{R}}
\newcommand{\beq}{\begin{equation}}
\newcommand{\eeq}{\end{equation}}
\newcommand{\m}[1]{\mathbf{#1}}
\newcommand{\Rlogo}{\includegraphics[width=0.05\textwidth]{figs/Rlogo.pdf}}

\title{Genetic clustering and hybrid detection using \textit{adegenet}}

\author{Thibaut Jombart
  \thanks{\texttt{thibautjombart@gmail.com}}
}
\affil{{\footnotesize Imperial College London \\MRC Centre for Outbreak Analysis and Modelling}}

%% \date{\today}
\date{\today}

\sloppy
\hyphenpenalty 10000

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{document}
\selectlanguage{english}

<<include=FALSE>>=
opts_chunk$set(fig.path='figs/genclust-', fig.keep='high', dev='pdf',
               fig.width=7, fig.height=7, tidy=FALSE, warning=FALSE,
               fig.show="asis", fig.align='center', out.width=".8\\textwidth")
@


\color{black}

\maketitle

\begin{abstract}
  This tutorial presents an overview of likelihood-based genetic clustering in
  \textit{adegenet}, as implemented by the function \texttt{genclust.em}. After
  a brief presentation of the rationale of the method, we illustrate its use in
  two situations: for identifying genetic clusters, and then for detecting
  hybrids.
\end{abstract}


\newpage
\tableofcontents




\newpage
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{The method, in a nutshell}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Model formulation}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% % % % % % % % % % % % % % % % % % % % % % % %
\subsubsection{Notations}
% % % % % % % % % % % % % % % % % % % % % % % %

The following notations will be used to describe the model.
\begin{itemize}
 \item $i = 1, \ldots, I$: index of individuals
 \item $j = 1, \ldots, J$: index of loci
 \item $k = 1, \ldots, K$: index of groups
 \item $x_{i,j}$: vector of allele counts for individual $i$ at locus $j$
 \item $x_i$: vector of allele counts of individual $i$ for all loci,
   i.e. concatenation $[x_{i,1} \ldots x_{i,J}]$
 \item $x$: matrix of allele counts, obtained by row-concatenation of the $x_i$
 \item $g_i$: group of individual $i$ ($g_i \in \{1, \ldots, K \} \:\:\forall\:\: i \in \{1, \ldots, I\}$)
 \item $g$: vector of group memberships ($g = g_1, \ldots, g_I$)
 \item $f_{k,j}$: vector of alle frequencies of group $k$ at locus $j$
 \item $f_{k}$: vector of alle frequencies of group $k$ for all loci, i.e. concatenation $[f_{k,1} \ldots x_{k,J}]$
 \item $x$: matrix of all allele frequencies, obtained by row-concatenation of the $f_k$
 \item $\pi$: the ploidy of all individuals
\end{itemize}



% % % % % % % % % % % % % % % % % % % % % % % %
\subsubsection{General likelihood}
% % % % % % % % % % % % % % % % % % % % % % % %
Likelihood-based genetic clustering in \textit{adegenet} is implemented by the
function \texttt{genclust.em}. This approach uses Hardy-Weinberg's equilibrium
to define the probabilities of observing given genotypes under known allele
frequencies. For now, we assume the group to which $i$ belongs is known
(noted $g_i$), and has known allele frequencies $f_{g_i,j}$. For any level of
ploidy $\pi$ and any codominant marker, the likelihood of $x_{i,j}$ is defined as:
\beq
p(x_{i,j} | f_{g_i, j}, \pi) = \mathcal{M} (x_{i,j}, f_{g_i, j}, \pi)
\eeq
where $\mathcal{M}$ is the multinomial probability mass function.

Assuming independence between loci ($j = 1, \ldots, J$), the likelihood of
individual $i$ across all loci is:
\beq
p(x_{i} | f_{g_i}, \pi) = \prod_j p(x_{i,j} | f_{g_i, j}, \pi)
\eeq

Assuming further independence between individuals, conditional on their group
membership $g$ and all allele frequencies $f$, the total likelihood is defined as:
\beq
p(x | f, g, \pi) = \prod_i p(x_{i} | f_{g_i}, \pi)
\eeq


So that the general equation for the total log-likelihood of the model is
computed as:
\beq
\mathcal{LL}(x,f,g,\pi) = \sum_i \sum_j \log ( \mathcal{M} (x_{i,j}, f_{g_i, j}, \pi))
\eeq

Note that this model could easily accomodate varying ploidy through $\pi_i$,
$\pi_j$ or $\pi_{i,j}$ but we leave this out for now.




% % % % % % % % % % % % % % % % % % % % % % % %
\subsubsection{Useful particular cases}
% % % % % % % % % % % % % % % % % % % % % % % %

As particular case, the likelihood of all possible diploid genotypes with
alleles $A$ and $B$ is defined, noting $f_{g_i}$ the vector of allele frequencies in
a given group $g_i$ as:
\begin{eqnarray}
p(AA | f_{g_i}, 2) = f_A ^ 2 \\
p(B | f_{g_i}, 2) = f_B ^ 2 \\
p(AB | f_{g_i}, 2) = 2 f_A f_B
\end{eqnarray}


Note that for haploid data, this is even simpler:
\begin{eqnarray}
p(A | f_{g_i}, 1) = f_A\\
p(B | f_{g_i}, 1) = f_B
\end{eqnarray}





% % % % % % % % % % % % % % % % % % % % % % % %
\subsubsection{Group membership probabilities}
% % % % % % % % % % % % % % % % % % % % % % % %

Assuming any individual $i$ comes from one of the sampled groups
$k = 1, \ldots, K$, the probability that $i$ belongs to group $k$ is defined as
the standardized likelihood:
\beq
p(g_i = k) = \frac{p(x_i | g_i=k, f_k, \pi)}{\sum_q p(x_i | g_i=q, f_q, \pi)}
\eeq

which ensures that:
\beq
\sum_k p(g_i=k) = 1
\eeq




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Estimation using the EM algorithm}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

The model formulation above supposes that both the groups $g$, and the allele
frequencies in these groups $f$, are known. In practice, though, these need to
be estimated. This is achieved using the expectation-maximization algorithm,
which we apply as follow:
\begin{enumerate}
  \item define initial groups for invididuals, $g$
  \item (\textit{expectation}) compute allele frequencies $f$ and then $p(g_i = k)$ for
    all $i$ and $k$
  \item (\textit{maximization}) assign individuals to their most likely group
  \item return to 2) until convergence
\end{enumerate}

Here, we consider that the algorithm has converged when the change in the global
log-likelihood is less than 1e-14. The advantage of this algorithm is that it
converges very fast, typically in less than 10 iterations. The first step can be
achieved using random group allocation, in which case several runs of the EM
algorithm can be useful to ensure that the best solution (with highest
log-likelihood) is attained. Alternatively, clusters can be defined by another
fast clustering method, such as the $k$-means implemented in
\texttt{find.clusters}. This latter option is used by default in our
implementation.



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Identifying hybrids}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

The allele frequency $f_{h_w}$ in a hybrid population $h_w$ is modelled as
weighted averages of the allele frequencies in the parental populations $k$ and $q$:
\beq
f_{h_w} = w f_{k} + (1-w) f_{q}
\eeq where $w$ has value
between 0 and 1. Typical values of $w$ are 0.5 for F1 hybrids, 0.75 for
backcrosses F1/1, 0.25 for backcrosses F1/2, etc.\\

The EM algorithm described above can be extended to account for various hybrids using:
\begin{enumerate}
  \item define initial groups for invididuals, $g$
  \item (expectation) define parental populations as the two groups most
    distant from each other; compute allele frequencies for parental populations
    $f_{k}$ and $f_{q}$ and subsequently for all hybrid populations $h_w$, and
    then $p(g_i = k)$, $p(g_i = q)$ and $p(g_i = h_w)$ for all $i$ and $h_w$
  \item (maximization) assign individuals to their most likely group
  \item return to 2) until convergence
\end{enumerate}






%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Example using simulated data}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{In the absence of hybrids: DAPC data revisited}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

<<include=FALSE>>=
opts_chunk$set(fig.width=10, fig.height=6, out.width="\\textwidth")
@


The method described above is implemented in the function
\texttt{genclust.em}. To illustrate it, we first re-analyse datasets originally
simulated to illustrate the DAPC (Jombart \textit{et al.} 2010, BCM
Genetics). The data \texttt{dapcIllus} contains for datasets:
\begin{itemize}
  \item \texttt{\$a}: island model with 6 demes
  \item \texttt{\$b}: hierarchical island model with 6 demes (3,2,1)
  \item \texttt{\$c}: one-dimensional stepping stone model with 12 demes
  \item \texttt{\$d}: one-dimensional stepping stone with a boundary in between
    sets of 12 demes
\end{itemize}


<<>>=
library(adegenet)
data(dapcIllus)
sapply(dapcIllus, nPop)
@

For each dataset, we identify clusters using \texttt{genclust.em}, indicating
the right number of clusters, and compare the obtained clusters to the true clusters.
<<>>=
a.clust <- genclust.em(dapcIllus$a, k = 6)
class(a.clust)
names(a.clust)
@

The output of \texttt{genlcust.em} is a list containing the following information:
\begin{itemize}
  \item \texttt{group}: a factor giving maximum-likelihood group assignment for
    each individual
  \item \texttt{ll}: the log-likelihood of the model
  \item \texttt{proba}: a matrix giving full group membership probabilities,
    with individuals in rows and clusters in column
  \item \texttt{converged}: a logical indicating if the algorithm converged
    before reaching the maximum number of iterations
  \item \texttt{n.iter}: the number of iterations after which the algorithm stopped
\end{itemize}

Let us examine these components:
<<>>=
head(a.clust$group, 12)
length(a.clust$group)
a.clust$ll
dim(a.clust$proba)
head(a.clust$proba)
head(round(a.clust$proba),3)
a.clust$converged
a.clust$n.iter
@


The inferred groups can be compared to the original ones using \texttt{table},
which builds a contingency table putting the original groups in rows, and the
newly inferred groups in columns; results are visualised using \texttt{table.value}
<<fig.width=7, fig.height=7, out.width=".6\\textwidth">>=
a.tab <- table(pop(dapcIllus$a), a.clust$group)
a.tab
table.value(a.tab, col.labels = 1:6)
@

Here, original groups were nearly perfectly retrieved.
Finally, we can visualise the group membership probabilities, which represent
the probabilities that each genotype was generated under the various
populations, using the \texttt{compoplot}:
<<>>=
compoplot(a.clust)
@

Here, assignment of individuals to their actual groups is essentially perfect;
the few 'misclassified' individuals are effectively migrants.
In fact, results remain very good in other models as well.
Results are near perfect for the hierarchical island mode:
<<fig.width=7, fig.height=7, out.width=".6\\textwidth">>=
b.clust <- genclust.em(dapcIllus$b, k = 6)
b.tab <- table(pop(dapcIllus$b), b.clust$group)
table.value(b.tab, col.labels = 1:6)
@
<<>>=
compoplot(b.clust)
@

and for the stepping stone model:
<<fig.width=7, fig.height=7, out.width=".6\\textwidth">>=
c.clust <- genclust.em(dapcIllus$c, k = 12)
c.tab <- table(pop(dapcIllus$c), c.clust$group)
table.value(c.tab, col.labels = 1:12)
@
<<>>=
compoplot(c.clust)
@

In the larger stepping stone model with a boundary, results remain very good but
some neighbouring demes are harder to distinguish (especially 1-2, 3-4, 13-14
and 18-19).
<<fig.width=7, fig.height=7, out.width=".6\\textwidth">>=
d.clust <- genclust.em(dapcIllus$d, k = 24)
d.tab <- table(pop(dapcIllus$d), d.clust$group)
table.value(d.tab, col.labels = 1:24, csize = .6)
@
<<>>=
compoplot(d.clust, n.col=8)
@
However, note that this lack of distinction in some demes merely comes from a
weak genetic differentiation:
<<d_dapc, fig.width=7, fig.height=7, out.width=".6\\textwidth">>=
d.dapc <- dapc(dapcIllus$d, n.pca = 20, n.da = 2)
scatter(d.dapc, clab = 0.85, col = deepseasun(24),
        posi.da="topleft", posi.pca = "bottomleft", scree.pca = TRUE)
@





%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Identifying hybrids}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% % % % % % % % % % % % % % % % % % % % % % % %
\subsubsection{Simulating hybrids using \texttt{hybridize}}
% % % % % % % % % % % % % % % % % % % % % % % %

Simulate hybrids F1
<<>>=
set.seed(1)
data(microbov)

zebu <- microbov[pop="Zebu"]
salers <- microbov[pop="Salers"]
hyb <- hybridize(zebu, salers, n = 30)
x <- repool(zebu, salers, hyb)
@


Simulate hybrids backcross (F1 / parental)
<<>>=
f1.zebu <- hybridize(hyb, zebu, 20, pop = "f1.zebu")
f1.salers <- hybridize(hyb, salers, 25, pop = "f1.salers")
y <- repool(x, f1.zebu, f1.salers)
@



% % % % % % % % % % % % % % % % % % % % % % % %
\subsubsection{Looking for hybrid using \texttt{genclust.em}}
% % % % % % % % % % % % % % % % % % % % % % % %


\texttt{genclust.em} can also be used in the presence of hybridization. In this
case, it will attempt to classify individuals into parental populations (later
noted $A$ and $B$), or
various types of hybrids defined by the user.
To activate the detection of hybrids, simply specify \texttt{hybrids = TRUE},
which will by default look for F1, i.e. 50\% of genes coming from each parental population.
Other types of hybrids can be specified through the argument
\texttt{hybrid.coef}, which is a vector of \textit{parental coefficients}. Each value in
this vector defines a given type of hybrid, by the proportion of its
gene pool contributed by the first parental population.
Complementary coefficients will be added automatically for the second parental
population. For instance, \texttt{hybrid.coef = c(0.25, 0.5)} will be converted
into \texttt{hybrid.coef = c(0.75, 0.5, 0.25)}, respectively corresponding to
backcross with $A$, F1, and backcross with $B$.




% % % % % % % % % % % % % % % % % % % % % % % %
\subsubsection{Looking for first-generation hybrids (F1)}
% % % % % % % % % % % % % % % % % % % % % % % %

We first use a Principal Component Analysis (PCA) to visualise the simulated
hybrid data:
<<fig.width=7, fig.height=7, out.width=".6\\textwidth">>=
x.pca <- dudi.pca(tab(x, NA.method = "mean"), scannf = FALSE, scale = FALSE)
s.class(x.pca$li, pop(x), col = hybridpal()(3))
@


The method applied without hybrid detection correctly identifies the parental
populations, but fails to classify hybrids:
<<>>=
res.no.hyb <- genclust.em(x, k = 2, hybrids = FALSE)
compoplot(res.no.hyb, n.col = 2, col.pal = hybridpal())
@

One may expect that hybrids would appear as individuals with group membership
probabilities around 50\% for each parental population. Interestingly, this is
almost never the case, irrespective of the type of clustering method. The detail
of likelihood contribution (results not shown) suggest that individuals slightly
closer to either parental population are simply much more likely to belong to
this population. The same can be observed in the Discriminant Analysis of
Principal Components (DAPC), which does not use likelihood but a geometric
criteria.
This can be illustrated by analysing the parental population (first 100
individuals) and predicting the group membership of the hybrids as supplementary individuals:
<<dapc>>=
x.dapc <- dapc(x[1:100], n.pca=80, n.da=2)
x.pred <- predict(x.dapc)$posterior
hyb.pred <- predict(x.dapc, newdata = x[-(1:100)])$posterior
compoplot(rbind(x.pred, hyb.pred), col.pal = virid, main = "DAPC prediction")
@


The problem of the above is that hybrids are seen as effectively outliers from
the parental populations, so that their classification is inherently very unstable.
To be formally identified, hybrids need to be modelled as a separate population,
whose allele frequency distribution is somewhere between the parental populations.
This is exactly the approach taken by \texttt{genclust.em}
<<>>=
res.hyb <- genclust.em(x, k = 2, hybrids = TRUE)
compoplot(res.hyb, n.col = 2, col.pal = hybridpal())
@



% % % % % % % % % % % % % % % % % % % % % % % %
\subsubsection{Looking for F1 and back-crosses}
% % % % % % % % % % % % % % % % % % % % % % % %

PCA:
<<fig.width=7, fig.height=7, out.width=".8\\textwidth">>=
y.pca <- dudi.pca(tab(y, NA.method = "mean"), scannf = FALSE, scale = FALSE)
s.class(y.pca$li, pop(y), col = hybridpal()(5))
@

method with hybrids F1 only
<<>>=
res2.hyb <- genclust.em(y, k = 2, hybrids = TRUE)
compoplot(res2.hyb, n.col = 2, col.pal = hybridpal())
@


 method with back-cross
<<>>=
res2.back <- genclust.em(y, k=2, hybrids = TRUE, hybrid.coef = c(.25,.5))
compoplot(res2.back, col.pal = hybridpal())
@

\end{document}

